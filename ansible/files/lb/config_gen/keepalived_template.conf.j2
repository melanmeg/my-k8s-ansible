# Define the script used to check if haproxy is still working
vrrp_script chk_haproxy {
    script "/usr/bin/killall -0 haproxy"
    interval 2
    weight 2
}

# Configuration for Virtual Interface
vrrp_instance LB_VIP_1 {
  interface ens3
  state {{ state }}
  priority {{ priority }}
  virtual_router_id 1
  smtp_alert              # Enable Notifications Via Email
  authentication {
      auth_type AH
      auth_pass zaq12wsx	# Password for accessing vrrpd. Same on all devices
  }
  unicast_src_ip {% raw %}{{ hostvars['k8s-lb-1']['ansible_default_ipv4']['address'] }}{% endraw %} # Private IP address of primary
  unicast_peer {
      {% raw %}{{ hostvars['k8s-lb-2']['ansible_default_ipv4']['address'] }}{% endraw %} # Private IP address of the backup haproxy
  }
  virtual_ipaddress {
      {% raw %}{{ KUBE_API_SERVER_VIP }}{% endraw %}
  }
  track_script {
      chk_haproxy
  }
}
{% for ip in lists %}
vrrp_instance LB_VIP_{{ loop.index + 1 }} {
  interface ens3
  state {{ state }}
  priority {{ priority }}
  virtual_router_id {{ loop.index + 1 }}
  smtp_alert              # Enable Notifications Via Email
  authentication {
      auth_type AH
      auth_pass zaq12wsx  # Password for accessing vrrpd. Same on all devices
  }
  unicast_src_ip {% raw %}{{ hostvars['k8s-lb-1']['ansible_default_ipv4']['address'] }}{% endraw %} # Private IP address of primary
  unicast_peer {
      {% raw %}{{ hostvars['k8s-lb-2']['ansible_default_ipv4']['address'] }}{% endraw %} # Private IP address of the backup haproxy
  }
  virtual_ipaddress {
      {{ ip }}
  }
  track_script {
      chk_haproxy
  }
}
{% endfor %}
